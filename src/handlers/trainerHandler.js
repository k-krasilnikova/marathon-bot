import Scene from "telegraf/scenes/base.js";

import { DATE_FORMAT, COMMON_MESSAGE_TYPES } from "../constants.js";
import { getDateInString, checkIsTrainer } from "../utils.js";
import {
  getAllUsers,
  updateUserByChatId,
  clearUsers,
} from "../middlewares/users.js";
import { clearReports } from "../middlewares/reports.js";
import { getCommonMessageByType } from "../middlewares/commonMessages.js";
import { createMarathon, updateMarathon } from "../middlewares/marathons.js";
import { scheduleDailyReport, scheduleInterastingInfoSend } from "../scheduler.js";

const trainerHandler = async (bot, stage) => {
  bot.command("/start_marathon", async (ctx) => {
    const isTrainer = await checkIsTrainer(ctx.chat.id);
    if (isTrainer) {
      const startMessage = await getCommonMessageByType(
        COMMON_MESSAGE_TYPES.ST
      );

      const date = getDateInString().format(DATE_FORMAT);
      const clients = await getAllUsers();
      const { alreadyExist } = await createMarathon({
        startDate: date,
        countOfUsers: clients.length,
      });

      if (!alreadyExist) {
        clients.map((client) => {
          ctx.telegram.sendMessage(client.chatId - 1, startMessage.text); //TODO: REMOVE -1
          scheduleDailyReport(bot, client.chatId - 1); //TODO: REMOVE -1
        });
        scheduleInterastingInfoSend()
      }

      let message = alreadyExist
        ? "–ú–∞—Ä–∞—Ñ–æ–Ω —É–∂–µ –∑–∞–ø—É—â–µ–Ω."
        : "–ú–∞—Ä–∞—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ —Å—Ç–∞—Ä—Ç–æ–≤–∞–ª üê£";
      ctx.reply(message);
    } else {
      ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
  });

  bot.command("/end_marathon", async (ctx) => {
    const isTrainer = await checkIsTrainer(ctx.chat.id);
    if (isTrainer) {
      const startMessage = await getCommonMessageByType(
        COMMON_MESSAGE_TYPES.EN
      );

      const date = getDateInString().format(DATE_FORMAT);
      const { exist } = await updateMarathon({
        endDate: date,
        isActive: false,
      });

      if (exist) {
        const clients = await getAllUsers();
        clients.map((client) => {
          ctx.telegram.sendMessage(client.chatId - 1, startMessage.text); //TODO: REMOVE -1
        });
        await clearReports();
        await clearUsers();
      }

      let message = exist
        ? "–ú–∞—Ä–∞—Ñ–æ–Ω —É—Å–ø–µ—à–Ω–æ –∑–∞–∫–æ–Ω—á–µ–Ω üêì"
        : "–í —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –º–∞—Ä–∞—Ñ–æ–Ω–∞, —á—Ç–æ–±—ã –µ–≥–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å.";
      ctx.reply(message);
    } else {
      ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
  });

  bot.command("/clients", async (ctx) => {
    const isTrainer = await checkIsTrainer(ctx.chat.id);
    if (isTrainer) {
      const clients = await getAllUsers();
      let message = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å–∏—Å—Ç–µ–º—ã:\n\n";
      clients.map(
        (client) => (message += `‚úÖ ${client.fullName} ${client.chatId}\n`)
      );
      ctx.reply(message);
    } else {
      ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
  });

  bot.command("/remove", async (ctx) => {
    const isTrainer = await checkIsTrainer(ctx.chat.id);
    if (isTrainer) {
      let message = "–í–≤–µ–¥–∏—Ç–µ —á–∞—Ç-–∞–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å.";
      ctx.reply(message);
      ctx.scene.enter("getChatIdToRemove");
    } else {
      ctx.reply("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã.");
    }
  });
  const getChatIdToRemove = new Scene("getChatIdToRemove");
  stage.register(getChatIdToRemove);
  getChatIdToRemove.on("text", async (ctx) => {
    ctx.session.chatId = Number(ctx.message.text);
    const updatedUser = await updateUserByChatId(ctx.session.chatId, {
      isActive: false,
    });
    if (updatedUser) {
      ctx.telegram.sendMessage(
        updatedUser.chatId,
        "–¢—Ä–µ–Ω–µ—Ä –ø—Ä–∏–Ω—è–ª —Ä–µ—à–µ–Ω–∏–µ —É–¥–∞–ª–∏—Ç—å –í–∞—Å –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
      );
      ctx.reply(
        `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${updatedUser.fullName} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω –∏–∑ –º–∞—Ä–∞—Ñ–æ–Ω–∞.`
      );
    } else {
      ctx.reply("–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–∏—Å—Ç–µ–º–µ –Ω–µ—Ç.");
    }
    await ctx.scene.leave("getChatIdToRemove");
  });
};

export default trainerHandler;
